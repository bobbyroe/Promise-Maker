// Generated by CoffeeScript 1.7.1
var loadAsset, makePromise;

loadAsset = function(url) {
  var promise, request, response;
  request = new XMLHttpRequest();
  response = null;
  promise = makePromise();
  request.open('GET', url, false);
  request.send(null);
  if (request.status === 200) {
    promise.fulfill(request.responseText);
  }
  return promise;
};

makePromise = function() {
  var dreading, outcome, status, waiting;
  status = 'unresolved';
  outcome = null;
  waiting = [];
  dreading = [];
  vouch(function(deed, func) {
    switch (status) {
      case 'unresolved':
        return (deed === 'fulfilled' ? waiting : dreading).push(func);
      case deed:
        return func(outcome);
    }
  });
  resolve(function(deed, value) {
    if (status !== 'unresolved') {
      throw new Error("the promise has already been resolved: " + status);
    }
    status = deed;
    outcome = value;
    (deed === 'fulfilled' ? waiting : dreading).forEach(function(func) {
      var ignore;
      try {
        return func(outcome);
      } catch (_error) {
        ignore = _error;
      }
    });
    waiting = null;
    return dreading = null;
  });
  return {
    when: function(func) {
      return vouch('fulfilled', func);
    },
    fail: function(func) {
      return vouch('failed', func);
    },
    fulfill: function(value) {
      return resolve('fulfilled', value);
    },
    smash: function(string) {
      return resolve('smashed', string);
    },
    status: function() {
      return status;
    }
  };
};

/*
//@ sourceMappingURL=promise_maker.map
*/
